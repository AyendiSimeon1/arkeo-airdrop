// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: arkeo/arkeo/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import {
  ContractAuthorization,
  contractAuthorizationFromJSON,
  contractAuthorizationToJSON,
  ContractType,
  contractTypeFromJSON,
  contractTypeToJSON,
  ProviderStatus,
  providerStatusFromJSON,
  providerStatusToJSON,
} from "./keeper";

export const protobufPackage = "arkeo.arkeo";

export interface MsgBondProvider {
  creator: string;
  provider: string;
  service: string;
  bond: string;
}

export interface MsgBondProviderResponse {
}

export interface MsgModProvider {
  creator: string;
  provider: Uint8Array;
  service: string;
  metadataUri: string;
  metadataNonce: number;
  status: ProviderStatus;
  minContractDuration: number;
  maxContractDuration: number;
  subscriptionRate: Coin[];
  payAsYouGoRate: Coin[];
  settlementDuration: number;
}

export interface MsgModProviderResponse {
}

export interface MsgOpenContract {
  creator: string;
  provider: string;
  service: string;
  client: string;
  delegate: string;
  contractType: ContractType;
  duration: number;
  rate: Coin | undefined;
  deposit: string;
  settlementDuration: number;
  authorization: ContractAuthorization;
  queriesPerMinute: number;
}

export interface MsgOpenContractResponse {
}

export interface MsgCloseContract {
  creator: string;
  contractId: number;
  client: Uint8Array;
  delegate: Uint8Array;
}

export interface MsgCloseContractResponse {
}

export interface MsgClaimContractIncome {
  creator: string;
  contractId: number;
  signature: Uint8Array;
  nonce: number;
}

export interface MsgClaimContractIncomeResponse {
}

/** this line is used by starport scaffolding # proto/tx/message */
export interface MsgSetVersion {
  creator: string;
  version: number;
}

export interface MsgSetVersionResponse {
}

function createBaseMsgBondProvider(): MsgBondProvider {
  return { creator: "", provider: "", service: "", bond: "" };
}

export const MsgBondProvider: MessageFns<MsgBondProvider> = {
  encode(message: MsgBondProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.provider !== "") {
      writer.uint32(18).string(message.provider);
    }
    if (message.service !== "") {
      writer.uint32(26).string(message.service);
    }
    if (message.bond !== "") {
      writer.uint32(34).string(message.bond);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBondProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBondProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.provider = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bond = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBondProvider {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      bond: isSet(object.bond) ? globalThis.String(object.bond) : "",
    };
  },

  toJSON(message: MsgBondProvider): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.bond !== "") {
      obj.bond = message.bond;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBondProvider>, I>>(base?: I): MsgBondProvider {
    return MsgBondProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBondProvider>, I>>(object: I): MsgBondProvider {
    const message = createBaseMsgBondProvider();
    message.creator = object.creator ?? "";
    message.provider = object.provider ?? "";
    message.service = object.service ?? "";
    message.bond = object.bond ?? "";
    return message;
  },
};

function createBaseMsgBondProviderResponse(): MsgBondProviderResponse {
  return {};
}

export const MsgBondProviderResponse: MessageFns<MsgBondProviderResponse> = {
  encode(_: MsgBondProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBondProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBondProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBondProviderResponse {
    return {};
  },

  toJSON(_: MsgBondProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBondProviderResponse>, I>>(base?: I): MsgBondProviderResponse {
    return MsgBondProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBondProviderResponse>, I>>(_: I): MsgBondProviderResponse {
    const message = createBaseMsgBondProviderResponse();
    return message;
  },
};

function createBaseMsgModProvider(): MsgModProvider {
  return {
    creator: "",
    provider: new Uint8Array(0),
    service: "",
    metadataUri: "",
    metadataNonce: 0,
    status: 0,
    minContractDuration: 0,
    maxContractDuration: 0,
    subscriptionRate: [],
    payAsYouGoRate: [],
    settlementDuration: 0,
  };
}

export const MsgModProvider: MessageFns<MsgModProvider> = {
  encode(message: MsgModProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.provider.length !== 0) {
      writer.uint32(18).bytes(message.provider);
    }
    if (message.service !== "") {
      writer.uint32(26).string(message.service);
    }
    if (message.metadataUri !== "") {
      writer.uint32(34).string(message.metadataUri);
    }
    if (message.metadataNonce !== 0) {
      writer.uint32(40).uint64(message.metadataNonce);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.minContractDuration !== 0) {
      writer.uint32(56).int64(message.minContractDuration);
    }
    if (message.maxContractDuration !== 0) {
      writer.uint32(64).int64(message.maxContractDuration);
    }
    for (const v of message.subscriptionRate) {
      Coin.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.payAsYouGoRate) {
      Coin.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.settlementDuration !== 0) {
      writer.uint32(88).int64(message.settlementDuration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgModProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgModProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.provider = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUri = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.metadataNonce = longToNumber(reader.uint64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.minContractDuration = longToNumber(reader.int64());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.maxContractDuration = longToNumber(reader.int64());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.subscriptionRate.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.payAsYouGoRate.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.settlementDuration = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgModProvider {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      provider: isSet(object.provider) ? bytesFromBase64(object.provider) : new Uint8Array(0),
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      metadataUri: isSet(object.metadataUri) ? globalThis.String(object.metadataUri) : "",
      metadataNonce: isSet(object.metadataNonce) ? globalThis.Number(object.metadataNonce) : 0,
      status: isSet(object.status) ? providerStatusFromJSON(object.status) : 0,
      minContractDuration: isSet(object.minContractDuration) ? globalThis.Number(object.minContractDuration) : 0,
      maxContractDuration: isSet(object.maxContractDuration) ? globalThis.Number(object.maxContractDuration) : 0,
      subscriptionRate: globalThis.Array.isArray(object?.subscriptionRate)
        ? object.subscriptionRate.map((e: any) => Coin.fromJSON(e))
        : [],
      payAsYouGoRate: globalThis.Array.isArray(object?.payAsYouGoRate)
        ? object.payAsYouGoRate.map((e: any) => Coin.fromJSON(e))
        : [],
      settlementDuration: isSet(object.settlementDuration) ? globalThis.Number(object.settlementDuration) : 0,
    };
  },

  toJSON(message: MsgModProvider): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.provider.length !== 0) {
      obj.provider = base64FromBytes(message.provider);
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.metadataUri !== "") {
      obj.metadataUri = message.metadataUri;
    }
    if (message.metadataNonce !== 0) {
      obj.metadataNonce = Math.round(message.metadataNonce);
    }
    if (message.status !== 0) {
      obj.status = providerStatusToJSON(message.status);
    }
    if (message.minContractDuration !== 0) {
      obj.minContractDuration = Math.round(message.minContractDuration);
    }
    if (message.maxContractDuration !== 0) {
      obj.maxContractDuration = Math.round(message.maxContractDuration);
    }
    if (message.subscriptionRate?.length) {
      obj.subscriptionRate = message.subscriptionRate.map((e) => Coin.toJSON(e));
    }
    if (message.payAsYouGoRate?.length) {
      obj.payAsYouGoRate = message.payAsYouGoRate.map((e) => Coin.toJSON(e));
    }
    if (message.settlementDuration !== 0) {
      obj.settlementDuration = Math.round(message.settlementDuration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgModProvider>, I>>(base?: I): MsgModProvider {
    return MsgModProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgModProvider>, I>>(object: I): MsgModProvider {
    const message = createBaseMsgModProvider();
    message.creator = object.creator ?? "";
    message.provider = object.provider ?? new Uint8Array(0);
    message.service = object.service ?? "";
    message.metadataUri = object.metadataUri ?? "";
    message.metadataNonce = object.metadataNonce ?? 0;
    message.status = object.status ?? 0;
    message.minContractDuration = object.minContractDuration ?? 0;
    message.maxContractDuration = object.maxContractDuration ?? 0;
    message.subscriptionRate = object.subscriptionRate?.map((e) => Coin.fromPartial(e)) || [];
    message.payAsYouGoRate = object.payAsYouGoRate?.map((e) => Coin.fromPartial(e)) || [];
    message.settlementDuration = object.settlementDuration ?? 0;
    return message;
  },
};

function createBaseMsgModProviderResponse(): MsgModProviderResponse {
  return {};
}

export const MsgModProviderResponse: MessageFns<MsgModProviderResponse> = {
  encode(_: MsgModProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgModProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgModProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgModProviderResponse {
    return {};
  },

  toJSON(_: MsgModProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgModProviderResponse>, I>>(base?: I): MsgModProviderResponse {
    return MsgModProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgModProviderResponse>, I>>(_: I): MsgModProviderResponse {
    const message = createBaseMsgModProviderResponse();
    return message;
  },
};

function createBaseMsgOpenContract(): MsgOpenContract {
  return {
    creator: "",
    provider: "",
    service: "",
    client: "",
    delegate: "",
    contractType: 0,
    duration: 0,
    rate: undefined,
    deposit: "",
    settlementDuration: 0,
    authorization: 0,
    queriesPerMinute: 0,
  };
}

export const MsgOpenContract: MessageFns<MsgOpenContract> = {
  encode(message: MsgOpenContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.provider !== "") {
      writer.uint32(18).string(message.provider);
    }
    if (message.service !== "") {
      writer.uint32(26).string(message.service);
    }
    if (message.client !== "") {
      writer.uint32(34).string(message.client);
    }
    if (message.delegate !== "") {
      writer.uint32(42).string(message.delegate);
    }
    if (message.contractType !== 0) {
      writer.uint32(48).int32(message.contractType);
    }
    if (message.duration !== 0) {
      writer.uint32(56).int64(message.duration);
    }
    if (message.rate !== undefined) {
      Coin.encode(message.rate, writer.uint32(66).fork()).join();
    }
    if (message.deposit !== "") {
      writer.uint32(74).string(message.deposit);
    }
    if (message.settlementDuration !== 0) {
      writer.uint32(80).int64(message.settlementDuration);
    }
    if (message.authorization !== 0) {
      writer.uint32(88).int32(message.authorization);
    }
    if (message.queriesPerMinute !== 0) {
      writer.uint32(96).int64(message.queriesPerMinute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpenContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpenContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.provider = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.client = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.delegate = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.contractType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.duration = longToNumber(reader.int64());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.rate = Coin.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deposit = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.settlementDuration = longToNumber(reader.int64());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.authorization = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.queriesPerMinute = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgOpenContract {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      client: isSet(object.client) ? globalThis.String(object.client) : "",
      delegate: isSet(object.delegate) ? globalThis.String(object.delegate) : "",
      contractType: isSet(object.contractType) ? contractTypeFromJSON(object.contractType) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      rate: isSet(object.rate) ? Coin.fromJSON(object.rate) : undefined,
      deposit: isSet(object.deposit) ? globalThis.String(object.deposit) : "",
      settlementDuration: isSet(object.settlementDuration) ? globalThis.Number(object.settlementDuration) : 0,
      authorization: isSet(object.authorization) ? contractAuthorizationFromJSON(object.authorization) : 0,
      queriesPerMinute: isSet(object.queriesPerMinute) ? globalThis.Number(object.queriesPerMinute) : 0,
    };
  },

  toJSON(message: MsgOpenContract): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.client !== "") {
      obj.client = message.client;
    }
    if (message.delegate !== "") {
      obj.delegate = message.delegate;
    }
    if (message.contractType !== 0) {
      obj.contractType = contractTypeToJSON(message.contractType);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.rate !== undefined) {
      obj.rate = Coin.toJSON(message.rate);
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    if (message.settlementDuration !== 0) {
      obj.settlementDuration = Math.round(message.settlementDuration);
    }
    if (message.authorization !== 0) {
      obj.authorization = contractAuthorizationToJSON(message.authorization);
    }
    if (message.queriesPerMinute !== 0) {
      obj.queriesPerMinute = Math.round(message.queriesPerMinute);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpenContract>, I>>(base?: I): MsgOpenContract {
    return MsgOpenContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpenContract>, I>>(object: I): MsgOpenContract {
    const message = createBaseMsgOpenContract();
    message.creator = object.creator ?? "";
    message.provider = object.provider ?? "";
    message.service = object.service ?? "";
    message.client = object.client ?? "";
    message.delegate = object.delegate ?? "";
    message.contractType = object.contractType ?? 0;
    message.duration = object.duration ?? 0;
    message.rate = (object.rate !== undefined && object.rate !== null) ? Coin.fromPartial(object.rate) : undefined;
    message.deposit = object.deposit ?? "";
    message.settlementDuration = object.settlementDuration ?? 0;
    message.authorization = object.authorization ?? 0;
    message.queriesPerMinute = object.queriesPerMinute ?? 0;
    return message;
  },
};

function createBaseMsgOpenContractResponse(): MsgOpenContractResponse {
  return {};
}

export const MsgOpenContractResponse: MessageFns<MsgOpenContractResponse> = {
  encode(_: MsgOpenContractResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpenContractResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpenContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgOpenContractResponse {
    return {};
  },

  toJSON(_: MsgOpenContractResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpenContractResponse>, I>>(base?: I): MsgOpenContractResponse {
    return MsgOpenContractResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpenContractResponse>, I>>(_: I): MsgOpenContractResponse {
    const message = createBaseMsgOpenContractResponse();
    return message;
  },
};

function createBaseMsgCloseContract(): MsgCloseContract {
  return { creator: "", contractId: 0, client: new Uint8Array(0), delegate: new Uint8Array(0) };
}

export const MsgCloseContract: MessageFns<MsgCloseContract> = {
  encode(message: MsgCloseContract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.contractId !== 0) {
      writer.uint32(16).uint64(message.contractId);
    }
    if (message.client.length !== 0) {
      writer.uint32(26).bytes(message.client);
    }
    if (message.delegate.length !== 0) {
      writer.uint32(34).bytes(message.delegate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseContract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.contractId = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.client = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.delegate = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCloseContract {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      contractId: isSet(object.contractId) ? globalThis.Number(object.contractId) : 0,
      client: isSet(object.client) ? bytesFromBase64(object.client) : new Uint8Array(0),
      delegate: isSet(object.delegate) ? bytesFromBase64(object.delegate) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgCloseContract): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.contractId !== 0) {
      obj.contractId = Math.round(message.contractId);
    }
    if (message.client.length !== 0) {
      obj.client = base64FromBytes(message.client);
    }
    if (message.delegate.length !== 0) {
      obj.delegate = base64FromBytes(message.delegate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCloseContract>, I>>(base?: I): MsgCloseContract {
    return MsgCloseContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCloseContract>, I>>(object: I): MsgCloseContract {
    const message = createBaseMsgCloseContract();
    message.creator = object.creator ?? "";
    message.contractId = object.contractId ?? 0;
    message.client = object.client ?? new Uint8Array(0);
    message.delegate = object.delegate ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgCloseContractResponse(): MsgCloseContractResponse {
  return {};
}

export const MsgCloseContractResponse: MessageFns<MsgCloseContractResponse> = {
  encode(_: MsgCloseContractResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseContractResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCloseContractResponse {
    return {};
  },

  toJSON(_: MsgCloseContractResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCloseContractResponse>, I>>(base?: I): MsgCloseContractResponse {
    return MsgCloseContractResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCloseContractResponse>, I>>(_: I): MsgCloseContractResponse {
    const message = createBaseMsgCloseContractResponse();
    return message;
  },
};

function createBaseMsgClaimContractIncome(): MsgClaimContractIncome {
  return { creator: "", contractId: 0, signature: new Uint8Array(0), nonce: 0 };
}

export const MsgClaimContractIncome: MessageFns<MsgClaimContractIncome> = {
  encode(message: MsgClaimContractIncome, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.contractId !== 0) {
      writer.uint32(16).uint64(message.contractId);
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.nonce !== 0) {
      writer.uint32(40).int64(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClaimContractIncome {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimContractIncome();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.contractId = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.nonce = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaimContractIncome {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      contractId: isSet(object.contractId) ? globalThis.Number(object.contractId) : 0,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      nonce: isSet(object.nonce) ? globalThis.Number(object.nonce) : 0,
    };
  },

  toJSON(message: MsgClaimContractIncome): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.contractId !== 0) {
      obj.contractId = Math.round(message.contractId);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimContractIncome>, I>>(base?: I): MsgClaimContractIncome {
    return MsgClaimContractIncome.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimContractIncome>, I>>(object: I): MsgClaimContractIncome {
    const message = createBaseMsgClaimContractIncome();
    message.creator = object.creator ?? "";
    message.contractId = object.contractId ?? 0;
    message.signature = object.signature ?? new Uint8Array(0);
    message.nonce = object.nonce ?? 0;
    return message;
  },
};

function createBaseMsgClaimContractIncomeResponse(): MsgClaimContractIncomeResponse {
  return {};
}

export const MsgClaimContractIncomeResponse: MessageFns<MsgClaimContractIncomeResponse> = {
  encode(_: MsgClaimContractIncomeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClaimContractIncomeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimContractIncomeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClaimContractIncomeResponse {
    return {};
  },

  toJSON(_: MsgClaimContractIncomeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimContractIncomeResponse>, I>>(base?: I): MsgClaimContractIncomeResponse {
    return MsgClaimContractIncomeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimContractIncomeResponse>, I>>(_: I): MsgClaimContractIncomeResponse {
    const message = createBaseMsgClaimContractIncomeResponse();
    return message;
  },
};

function createBaseMsgSetVersion(): MsgSetVersion {
  return { creator: "", version: 0 };
}

export const MsgSetVersion: MessageFns<MsgSetVersion> = {
  encode(message: MsgSetVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.version !== 0) {
      writer.uint32(16).int64(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.version = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetVersion {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: MsgSetVersion): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetVersion>, I>>(base?: I): MsgSetVersion {
    return MsgSetVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetVersion>, I>>(object: I): MsgSetVersion {
    const message = createBaseMsgSetVersion();
    message.creator = object.creator ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseMsgSetVersionResponse(): MsgSetVersionResponse {
  return {};
}

export const MsgSetVersionResponse: MessageFns<MsgSetVersionResponse> = {
  encode(_: MsgSetVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetVersionResponse {
    return {};
  },

  toJSON(_: MsgSetVersionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetVersionResponse>, I>>(base?: I): MsgSetVersionResponse {
    return MsgSetVersionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetVersionResponse>, I>>(_: I): MsgSetVersionResponse {
    const message = createBaseMsgSetVersionResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  BondProvider(request: MsgBondProvider): Promise<MsgBondProviderResponse>;
  ModProvider(request: MsgModProvider): Promise<MsgModProviderResponse>;
  OpenContract(request: MsgOpenContract): Promise<MsgOpenContractResponse>;
  CloseContract(request: MsgCloseContract): Promise<MsgCloseContractResponse>;
  ClaimContractIncome(request: MsgClaimContractIncome): Promise<MsgClaimContractIncomeResponse>;
  /** this line is used by starport scaffolding # proto/tx/rpc */
  SetVersion(request: MsgSetVersion): Promise<MsgSetVersionResponse>;
}

export const MsgServiceName = "arkeo.arkeo.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.BondProvider = this.BondProvider.bind(this);
    this.ModProvider = this.ModProvider.bind(this);
    this.OpenContract = this.OpenContract.bind(this);
    this.CloseContract = this.CloseContract.bind(this);
    this.ClaimContractIncome = this.ClaimContractIncome.bind(this);
    this.SetVersion = this.SetVersion.bind(this);
  }
  BondProvider(request: MsgBondProvider): Promise<MsgBondProviderResponse> {
    const data = MsgBondProvider.encode(request).finish();
    const promise = this.rpc.request(this.service, "BondProvider", data);
    return promise.then((data) => MsgBondProviderResponse.decode(new BinaryReader(data)));
  }

  ModProvider(request: MsgModProvider): Promise<MsgModProviderResponse> {
    const data = MsgModProvider.encode(request).finish();
    const promise = this.rpc.request(this.service, "ModProvider", data);
    return promise.then((data) => MsgModProviderResponse.decode(new BinaryReader(data)));
  }

  OpenContract(request: MsgOpenContract): Promise<MsgOpenContractResponse> {
    const data = MsgOpenContract.encode(request).finish();
    const promise = this.rpc.request(this.service, "OpenContract", data);
    return promise.then((data) => MsgOpenContractResponse.decode(new BinaryReader(data)));
  }

  CloseContract(request: MsgCloseContract): Promise<MsgCloseContractResponse> {
    const data = MsgCloseContract.encode(request).finish();
    const promise = this.rpc.request(this.service, "CloseContract", data);
    return promise.then((data) => MsgCloseContractResponse.decode(new BinaryReader(data)));
  }

  ClaimContractIncome(request: MsgClaimContractIncome): Promise<MsgClaimContractIncomeResponse> {
    const data = MsgClaimContractIncome.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClaimContractIncome", data);
    return promise.then((data) => MsgClaimContractIncomeResponse.decode(new BinaryReader(data)));
  }

  SetVersion(request: MsgSetVersion): Promise<MsgSetVersionResponse> {
    const data = MsgSetVersion.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetVersion", data);
    return promise.then((data) => MsgSetVersionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
