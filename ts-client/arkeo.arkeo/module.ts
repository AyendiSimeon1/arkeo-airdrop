// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgOpenContract } from "./types/arkeo/arkeo/tx";
import { MsgCloseContract } from "./types/arkeo/arkeo/tx";
import { MsgClaimContractIncome } from "./types/arkeo/arkeo/tx";
import { MsgSetVersion } from "./types/arkeo/arkeo/tx";
import { MsgBondProvider } from "./types/arkeo/arkeo/tx";
import { MsgModProvider } from "./types/arkeo/arkeo/tx";


export { MsgOpenContract, MsgCloseContract, MsgClaimContractIncome, MsgSetVersion, MsgBondProvider, MsgModProvider };

type sendMsgOpenContractParams = {
  value: MsgOpenContract,
  fee?: StdFee,
  memo?: string
};

type sendMsgCloseContractParams = {
  value: MsgCloseContract,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimContractIncomeParams = {
  value: MsgClaimContractIncome,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetVersionParams = {
  value: MsgSetVersion,
  fee?: StdFee,
  memo?: string
};

type sendMsgBondProviderParams = {
  value: MsgBondProvider,
  fee?: StdFee,
  memo?: string
};

type sendMsgModProviderParams = {
  value: MsgModProvider,
  fee?: StdFee,
  memo?: string
};


type msgOpenContractParams = {
  value: MsgOpenContract,
};

type msgCloseContractParams = {
  value: MsgCloseContract,
};

type msgClaimContractIncomeParams = {
  value: MsgClaimContractIncome,
};

type msgSetVersionParams = {
  value: MsgSetVersion,
};

type msgBondProviderParams = {
  value: MsgBondProvider,
};

type msgModProviderParams = {
  value: MsgModProvider,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgOpenContract({ value, fee, memo }: sendMsgOpenContractParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgOpenContract: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgOpenContract({ value: MsgOpenContract.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgOpenContract: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCloseContract({ value, fee, memo }: sendMsgCloseContractParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCloseContract: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCloseContract({ value: MsgCloseContract.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCloseContract: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimContractIncome({ value, fee, memo }: sendMsgClaimContractIncomeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimContractIncome: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClaimContractIncome({ value: MsgClaimContractIncome.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimContractIncome: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetVersion({ value, fee, memo }: sendMsgSetVersionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetVersion: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetVersion({ value: MsgSetVersion.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetVersion: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBondProvider({ value, fee, memo }: sendMsgBondProviderParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBondProvider: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBondProvider({ value: MsgBondProvider.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBondProvider: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgModProvider({ value, fee, memo }: sendMsgModProviderParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgModProvider: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgModProvider({ value: MsgModProvider.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgModProvider: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgOpenContract({ value }: msgOpenContractParams): EncodeObject {
			try {
				return { typeUrl: "/arkeo.arkeo.MsgOpenContract", value: MsgOpenContract.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgOpenContract: Could not create message: ' + e.message)
			}
		},
		
		msgCloseContract({ value }: msgCloseContractParams): EncodeObject {
			try {
				return { typeUrl: "/arkeo.arkeo.MsgCloseContract", value: MsgCloseContract.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCloseContract: Could not create message: ' + e.message)
			}
		},
		
		msgClaimContractIncome({ value }: msgClaimContractIncomeParams): EncodeObject {
			try {
				return { typeUrl: "/arkeo.arkeo.MsgClaimContractIncome", value: MsgClaimContractIncome.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimContractIncome: Could not create message: ' + e.message)
			}
		},
		
		msgSetVersion({ value }: msgSetVersionParams): EncodeObject {
			try {
				return { typeUrl: "/arkeo.arkeo.MsgSetVersion", value: MsgSetVersion.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetVersion: Could not create message: ' + e.message)
			}
		},
		
		msgBondProvider({ value }: msgBondProviderParams): EncodeObject {
			try {
				return { typeUrl: "/arkeo.arkeo.MsgBondProvider", value: MsgBondProvider.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBondProvider: Could not create message: ' + e.message)
			}
		},
		
		msgModProvider({ value }: msgModProviderParams): EncodeObject {
			try {
				return { typeUrl: "/arkeo.arkeo.MsgModProvider", value: MsgModProvider.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgModProvider: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			ArkeoArkeo: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;